<article class="chapter">
  <h1>Ember API Documentation</h1>
  <p>
    To get started, choose a project (Ember or Ember Data) and a version 
    from the dropdown menu. Ember has core methods used in any app, while Ember Data has 
    documentation of the built-in library for making requests to a back end.
    If you're looking for documentation of the command line tool used to generate files, build your 
    app, and more, visit <a href="https://cli.emberjs.com/">ember-cli</a>. The latest
    testing API is available at 
    <a href="https://github.com/emberjs/ember-test-helpers/blob/master/API.md">ember-test-helpers</a>.
  </p>
  <h2>Commonly searched-for documentation</h2>
  <ul class="spec-method-list">
    <li><LinkTo @route="project-version.classes.class" @model="Component">Component</LinkTo> - a view that is completely isolated</li>
    <li><LinkTo @route="project-version.classes.class" @model="ComputedProperty">Computed Properties</LinkTo> - declare functions as properties</li>
    <li><LinkTo @route="project-version.classes.class" @model="@ember/object/computed">Computed Macros</LinkTo> - shorter ways of expressing certain types of computed properties</li>
    <li><LinkTo @route="project-version.classes.class" @model="EmberArray">EmberArray</LinkTo> - contains methods like <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'EmberArray' 'forEach'}} @query={{hash anchor='forEach'}}>forEach</LinkTo> and <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'EmberArray' 'mapBy'}} @query={{hash anchor='mapBy'}}>mapBy</LinkTo> that help you iterate over Ember Objects</li>
    <li><LinkTo @route="project-version.classes.class" @model="EmberObject">EmberObject</LinkTo> - the main base class for all Ember objects, including the <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'EmberObject' 'get'}} @query={{hash anchor='get'}}>get</LinkTo> and <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'EmberObject' 'set'}} @query={{hash anchor='set'}}>set</LinkTo> methods</li>
    <li><LinkTo @route="project-version.classes.class" @model="Ember.Templates.helpers">Ember.Templates.helpers</LinkTo> - built-in functions that can be used in templates, such as the <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'Ember.Templates.helpers' 'each'}} @query={{hash anchor='each'}}>each</LinkTo> helper</li>
    <li><LinkTo @route="project-version.classes.class" @model="Helper">Helpers</LinkTo> - a way to define custom display functions that are used in templates</li>
    <li><LinkTo @route="project-version.classes.class" @model="Route">Route</LinkTo> - used to define individual routes, including the <LinkTo @route="project-version.classes.class.methods.method" @models={{array 'Route' 'model'}} @query={{hash anchor='model'}}>model</LinkTo> hook for loading data</li>
    <li><LinkTo @route="project-version.classes.class" @model="Service">Service</LinkTo> - an Ember object that lives for the duration of the application, and can be made available in different parts of your application</li>
  </ul>
  <h2>How to import and use packages</h2>
  <p>
    Ember has a modern ECMAScript 2015 (also known as ES2015 or ES6) modules API. Each major class and its supporting functions live in a dedicated module, which you can import like this:
  </p>
  {{newPackageImportSyntax}}
  <p>
    When working with older Ember codebases, you may see a different set of imports. Before the Ember JavaScript Modules API design, developers had to import the entire Ember framework as a single package. That package was an object which contained <em>all</em> the Ember classes and functions, so you will see code that pulls the classes or functions off that object, like this:
  </p>
  {{oldPackageImportSyntax}}
  <p>
    For new apps, you should always prefer the the JavaScript Modules API, and old apps should migrate to it over time: it allows the building of smaller packages based on chunks of functionality and importing only parts of the Ember framework that are needed.
  </p>
  <p>
    The most up-to-date and complete mappings between the previous API and the new JavaScript Modules API can be found at the <a href='https://github.com/ember-cli/ember-rfc176-data'>ember-rfc176-data</a> repository.  <a href='https://github.com/tomdale/ember-modules-codemod'>Codemod tooling</a> is also available to help migrate existing Ember projects to the new JavaScript Modules API syntax.
  </p>
  <h2>Useful links</h2>
  <ul>
    <li>
      <h5>
        <a href="https://github.com/ember-learn/ember-api-docs">API Documentation Github Repository</a>
      </h5>
    </li>
    <li>
      <h5>
        <a href="https://guides.emberjs.com/release/getting-started/core-concepts/">Ember Core Concepts</a>
      </h5>
    </li>
  </ul>
</article>
